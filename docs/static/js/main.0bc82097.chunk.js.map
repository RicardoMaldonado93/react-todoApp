{"version":3,"sources":["components/components/AddTodo.js","components/hooks/useForm.js","components/components/TodoItem.js","components/components/TodoList.js","components/todoReducer.js","components/TodoApp.js","index.js"],"names":["AddTodo","handleAddTodo","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","useForm","description","onSubmit","e","preventDefault","trim","length","newTodo","id","Date","getTime","desc","done","autoComplete","className","placeholder","type","onChange","style","TodoItem","React","memo","todo","index","handleDelete","handleToggle","key","onClick","TodoList","todos","map","i","todoReducer","state","action","payload","filter","TodoApp","useReducer","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","todoID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bc82097.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useForm } from '../hooks/useForm';\r\n\r\nexport const AddTodo = ({ handleAddTodo }) => {\r\n\r\n    \r\n    /** Se obtiene del Hook useForm el metodo handleInputChange para detectar cambios */\r\n    const [{ description }, handleInputChange, reset] = useForm({ description: '' });\r\n    \r\n    /** evento para realizar el submit */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (description.trim().length < 1) return;\r\n\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            desc: description,\r\n            done: false\r\n        }\r\n\r\n        /** se usa para llamara al action del reducer */\r\n        handleAddTodo( newTodo );\r\n\r\n        /** metodo que permite limpiar el campo por medio del hook useForm */\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h4>Agregar TODO</h4>\r\n            <hr />\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    className=\"form-control\"\r\n                    name=\"description\"\r\n                    placeholder=\"Tarea...\"\r\n                    type=\"text\"\r\n                    value={description}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <button\r\n                    className=\"btn btn-outline-primary mt-1 btn-block\"\r\n                    style={{ \"margin\": \"0\" }}\r\n                    type=\"submit\"\r\n                >\r\n                    Agregar\r\n                </button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () =>{\r\n        setValues(initialState);\r\n    }\r\n\r\n    const handleInputChange = ({target})=>{ \r\n        setValues({...values,[target.name] : target.value}\r\n    )};\r\n\r\n    return [\r\n        values,\r\n        handleInputChange,\r\n        reset\r\n    ]\r\n}\r\n","import React from 'react'\r\n\r\nexport const TodoItem = React.memo(({ todo, index, handleDelete, handleToggle }) => {\r\n\r\n    return (\r\n\r\n        <li\r\n            className=\"list-group-item\"\r\n            key={todo.id}\r\n        >\r\n\r\n            <p\r\n                className={`${todo.done && 'complete'}`}\r\n                onClick={() => handleToggle(todo.id)}\r\n            >\r\n                {index + 1}. {todo.desc}\r\n            </p>\r\n\r\n            <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => handleDelete(todo.id)}\r\n            >\r\n                Borrar\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n)","import React from 'react'\r\nimport { TodoItem } from './TodoItem'\r\n\r\nexport const TodoList = React.memo(({ todos = [], handleDelete, handleToggle }) => {\r\n\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {\r\n                todos.map((todo, i) => (\r\n                    <TodoItem\r\n                        todo={todo}\r\n                        handleDelete={handleDelete}\r\n                        handleToggle={handleToggle}\r\n                        index={i}\r\n                        key={todo.id}\r\n                    />\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n})\r\n","export const todoReducer = ( state = [] , action )=>{\r\n    \r\n    switch (action?.type) {\r\n        case \"add\":\r\n            return [ ...state, action.payload ];   \r\n        \r\n        case \"delete\":{\r\n            const id = action.payload;\r\n            return state.filter( todo => todo.id != id )\r\n        }\r\n        \r\n        case \"toggle\":\r\n            return state.map( todo => ( todo.id == action.payload ) ? { ...todo, done: !todo.done } : todo);\r\n\r\n        case \"toggle-old\":{\r\n            const id = action.payload;\r\n            \r\n            return state.map( todo =>{ \r\n                if(todo.id == id) \r\n                    return { ...todo, done: !todo.done }   \r\n                else\r\n                    return todo;\r\n            });\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useEffect, useReducer } from 'react';\r\nimport { AddTodo } from './components/AddTodo';\r\nimport { TodoList } from './components/TodoList';\r\nimport { todoReducer } from './todoReducer';\r\n\r\nexport const TodoApp = () => {\r\n\r\n    /** Instancia el estado inicial del reducer */\r\n    const init = () => { return JSON.parse(localStorage.getItem(\"todos\")) || []; }\r\n\r\n    const [todos, dispatch] = useReducer(todoReducer, [], init)\r\n\r\n\r\n   \r\n    /** detecta cualquier cambio del todos para guardar en localStorage */\r\n    useEffect(() => { localStorage.setItem(\"todos\", JSON.stringify(todos)); }, [todos]);\r\n\r\n    const handleDelete = (todoID) => {\r\n\r\n        const action = {\r\n            type: \"delete\",\r\n            payload: todoID\r\n        }\r\n\r\n        dispatch(action);\r\n    }\r\n\r\n    const handleToggle = (todoID) => {\r\n\r\n        dispatch({\r\n            type: \"toggle\",\r\n            payload: todoID\r\n        });\r\n\r\n    }\r\n\r\n    const handleAddTodo = ( newTodo ) =>{\r\n        dispatch({\r\n            type: \"add\",\r\n            payload: newTodo\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                    <h1>TODO App </h1>\r\n                </div>\r\n                \r\n                <div className=\"col-4 task-counter\">\r\n                    <h4>task: ({todos.length})</h4>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-7\">\r\n                    <TodoList\r\n                        todos={todos}\r\n                        handleDelete={handleDelete}\r\n                        handleToggle={handleToggle}\r\n                    />\r\n                </div>\r\n                <div className=\"col-5\">\r\n                    <AddTodo\r\n                        handleAddTodo = { handleAddTodo }\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TodoApp } from './components/TodoApp';\nimport './index.css';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}